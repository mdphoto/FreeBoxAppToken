#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour cr√©er et autoriser une application Freebox nomm√©e "raddar"
Ce script permet de r√©cup√©rer un token valide et l'ID de l'application
apr√®s validation sur l'√©cran LCD de la Freebox.
"""

import requests
import json
import time
import sys
from typing import Dict, Optional, Tuple
import urllib3

# D√©sactiver les avertissements SSL pour les connexions locales Freebox
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class FreeboxAPI:
    def __init__(self, freebox_ip: str = "mafreebox.freebox.fr"):
        """
        Initialise la connexion √† l'API Freebox
        
        Args:
            freebox_ip: Adresse IP ou nom d'h√¥te de la Freebox (par d√©faut: mafreebox.freebox.fr)
        """
        self.freebox_ip = freebox_ip
        self.base_url = f"http://{freebox_ip}/api"
        self.api_version = None
        self.app_token = None
        self.app_id = None
        self.session_token = None
        
        # Informations de l'application
        self.app_info = {
            "app_id": "raddar",
            "app_name": "Raddar",
            "app_version": "1.0.0",
            "device_name": "Python Script"
        }
    
    def get_api_version(self) -> Optional[str]:
        """
        R√©cup√®re la version de l'API Freebox
        
        Returns:
            Version de l'API ou None en cas d'erreur
        """
        try:
            response = requests.get(f"{self.base_url}/v1/api_version", timeout=10, verify=False)
            response.raise_for_status()
            data = response.json()
            
            # La r√©ponse de l'API version ne contient pas de champ "success"
            # mais directement les informations
            if "api_version" in data:
                self.api_version = data["api_version"]
                print(f"‚úì Version de l'API Freebox: {self.api_version}")
                print(f"‚úì Mod√®le de Freebox: {data.get('box_model_name', 'Inconnu')}")
                print(f"‚úì Domaine API: {data.get('api_domain', 'mafreebox.freebox.fr')}")
                
                # Mettre √† jour l'URL de base avec le domaine API si disponible
                if data.get('api_domain'):
                    self.freebox_ip = data['api_domain']
                    api_base_url = data.get('api_base_url', '/api/')
                    self.base_url = f"https://{self.freebox_ip}:{data.get('https_port', 443)}{api_base_url.rstrip('/')}"
                
                return self.api_version
            else:
                print(f"‚úó Erreur lors de la r√©cup√©ration de la version API: {data}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚úó Erreur de connexion √† la Freebox: {e}")
            return None
    
    def register_app(self) -> Optional[Tuple[str, str]]:
        """
        Enregistre l'application aupr√®s de la Freebox
        
        Returns:
            Tuple (app_token, track_id) ou None en cas d'erreur
        """
        if not self.api_version:
            print("‚úó Version API non disponible")
            return None
        
        # Utiliser seulement la version majeure de l'API
        api_major_version = self.api_version.split('.')[0]
        url = f"{self.base_url}/v{api_major_version}/login/authorize/"
        
        try:
            response = requests.post(url, json=self.app_info, timeout=10, verify=False)
            response.raise_for_status()
            data = response.json()
            
            if data.get("success"):
                app_token = data["result"]["app_token"]
                track_id = data["result"]["track_id"]
                
                print(f"‚úì Application enregistr√©e avec succ√®s!")
                print(f"  - App Token: {app_token}")
                print(f"  - Track ID: {track_id}")
                print(f"  - App ID: {self.app_info['app_id']}")
                
                self.app_token = app_token
                return app_token, track_id
            else:
                print(f"‚úó Erreur lors de l'enregistrement: {data}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚úó Erreur lors de l'enregistrement: {e}")
            return None
    
    def check_authorization_status(self, track_id: str) -> str:
        """
        V√©rifie le statut d'autorisation de l'application
        
        Args:
            track_id: ID de suivi de la demande d'autorisation
            
        Returns:
            Statut de l'autorisation ('unknown', 'pending', 'timeout', 'granted', 'denied')
        """
        if not self.api_version:
            return "unknown"
        
        # Utiliser seulement la version majeure de l'API
        api_major_version = self.api_version.split('.')[0]
        url = f"{self.base_url}/v{api_major_version}/login/authorize/{track_id}"
        
        try:
            response = requests.get(url, timeout=10, verify=False)
            response.raise_for_status()
            data = response.json()
            
            if data.get("success"):
                status = data["result"]["status"]
                challenge = data["result"].get("challenge", "")
                
                if status == "granted":
                    print(f"‚úì Autorisation accord√©e! Challenge: {challenge}")
                
                return status
            else:
                print(f"‚úó Erreur lors de la v√©rification du statut: {data}")
                return "unknown"
                
        except requests.exceptions.RequestException as e:
            print(f"‚úó Erreur lors de la v√©rification: {e}")
            return "unknown"
    
    def wait_for_authorization(self, track_id: str, timeout: int = 120) -> bool:
        """
        Attend l'autorisation de l'utilisateur sur l'√©cran LCD
        
        Args:
            track_id: ID de suivi de la demande
            timeout: Timeout en secondes (par d√©faut: 120s)
            
        Returns:
            True si autoris√©, False sinon
        """
        print("\n" + "="*60)
        print("üîî VALIDATION REQUISE SUR LA FREEBOX")
        print("="*60)
        print("Veuillez vous rendre sur l'√©cran LCD de votre Freebox")
        print("et accepter la demande d'autorisation pour l'application 'Raddar'")
        print("="*60)
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            status = self.check_authorization_status(track_id)
            
            if status == "granted":
                print("\n‚úì Autorisation accord√©e avec succ√®s!")
                return True
            elif status == "denied":
                print("\n‚úó Autorisation refus√©e par l'utilisateur")
                return False
            elif status == "timeout":
                print("\n‚úó Timeout de la demande d'autorisation")
                return False
            elif status == "pending":
                remaining = int(timeout - (time.time() - start_time))
                print(f"\r‚è≥ En attente de validation... ({remaining}s restantes)", end="", flush=True)
                time.sleep(2)
            else:
                print(f"\n‚ö†Ô∏è  Statut inconnu: {status}")
                time.sleep(2)
        
        print(f"\n‚úó Timeout apr√®s {timeout} secondes")
        return False
    
    def save_credentials(self, filename: str = "freebox_credentials.json") -> bool:
        """
        Sauvegarde les identifiants dans un fichier JSON
        
        Args:
            filename: Nom du fichier de sauvegarde
            
        Returns:
            True si sauvegard√© avec succ√®s, False sinon
        """
        if not self.app_token:
            print("‚úó Aucun token √† sauvegarder")
            return False
        
        credentials = {
            "app_id": self.app_info["app_id"],
            "app_name": self.app_info["app_name"],
            "app_version": self.app_info["app_version"],
            "app_token": self.app_token,
            "freebox_ip": self.freebox_ip,
            "api_version": self.api_version
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(credentials, f, indent=2, ensure_ascii=False)
            
            print(f"‚úì Identifiants sauvegard√©s dans: {filename}")
            return True
            
        except Exception as e:
            print(f"‚úó Erreur lors de la sauvegarde: {e}")
            return False
    
    def load_credentials(self, filename: str = "freebox_credentials.json") -> bool:
        """
        Charge les identifiants depuis un fichier JSON
        
        Args:
            filename: Nom du fichier √† charger
            
        Returns:
            True si charg√© avec succ√®s, False sinon
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                credentials = json.load(f)
            
            self.app_token = credentials.get("app_token")
            self.api_version = credentials.get("api_version")
            self.freebox_ip = credentials.get("freebox_ip", self.freebox_ip)
            
            print(f"‚úì Identifiants charg√©s depuis: {filename}")
            return True
            
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  Fichier non trouv√©: {filename}")
            return False
        except Exception as e:
            print(f"‚úó Erreur lors du chargement: {e}")
            return False


def main():
    """
    Fonction principale pour cr√©er et autoriser l'application Raddar
    """
    print("üöÄ Script d'enregistrement de l'application Raddar pour Freebox")
    print("=" * 60)
    
    # Initialisation de l'API Freebox
    freebox = FreeboxAPI()
    
    # √âtape 1: R√©cup√©ration de la version API
    print("\nüì° Connexion √† la Freebox...")
    if not freebox.get_api_version():
        print("‚úó Impossible de se connecter √† la Freebox")
        sys.exit(1)
    
    # √âtape 2: V√©rification si des identifiants existent d√©j√†
    if freebox.load_credentials():
        print("‚úì Identifiants existants trouv√©s")
        print(f"  - App ID: {freebox.app_info['app_id']}")
        print(f"  - App Token: {freebox.app_token}")
        
        choice = input("\nVoulez-vous cr√©er une nouvelle autorisation ? (o/N): ").lower()
        if choice not in ['o', 'oui', 'y', 'yes']:
            print("‚úì Utilisation des identifiants existants")
            return
    
    # √âtape 3: Enregistrement de l'application
    print(f"\nüìù Enregistrement de l'application '{freebox.app_info['app_name']}'...")
    result = freebox.register_app()
    
    if not result:
        print("‚úó √âchec de l'enregistrement de l'application")
        sys.exit(1)
    
    app_token, track_id = result
    
    # √âtape 4: Attente de l'autorisation
    if freebox.wait_for_authorization(track_id):
        print("\nüéâ Application autoris√©e avec succ√®s!")
        
        # √âtape 5: Sauvegarde des identifiants
        if freebox.save_credentials():
            print("\nüìã R√âSUM√â DE L'APPLICATION")
            print("=" * 40)
            print(f"App ID: {freebox.app_info['app_id']}")
            print(f"App Name: {freebox.app_info['app_name']}")
            print(f"App Token: {app_token}")
            print(f"Freebox IP: {freebox.freebox_ip}")
            print(f"API Version: {freebox.api_version}")
            print("=" * 40)
            print("‚úÖ L'application Raddar est maintenant pr√™te √† √™tre utilis√©e!")
        else:
            print("‚ö†Ô∏è  Application autoris√©e mais erreur de sauvegarde")
    else:
        print("\n‚ùå √âchec de l'autorisation de l'application")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Script interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        sys.exit(1)